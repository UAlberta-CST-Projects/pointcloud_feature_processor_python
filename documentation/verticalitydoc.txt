DOCUMENTATION FOR compute_verticality() IN operations.py

As in CloudCompare, the verticality of a point is a value that represents how vertical the surface
created by the point cloud is. The range of this value is from 0 to 1, with 0 indicating a flat surface in
the x- and y- plane (with z = 0). A value of 1 is assigned when the surface is parallel to the z-axis, or
completely vertical. A plane with a normal at an angle of 45 degrees above the horizontal will be assigned a
value of 0.5.

To run this function, run the program compute_features.py. Open a point cloud file and then enter "4" into the
console when prompted to calculate the verticality of the points in the point cloud.

---

compute_verticality() computes the verticality of each point in a given 3D point cloud. Its paramaters and 
return are as follows:

    :param pc: a dataframe containing the xyz portion of the pointcloud
    :param tree: a nearest neighbors tree for all the points
    :param PPEexec: a ProcessPoolExecutor for crunching all the numbers in parallel
    :param radius: the radius in which to search for nearest neighbors
    :param k: the max number of nearest neighbors to query
    :return: a list of verticality values with the same length as the number of points

This function first established a query tree for the nearest neighbours and determines arg lists (same as other
functions in the code), then computes the verticality for each point using the helper function _compute_vert()

---

_compute_vert() is a helper function that computes the verticality of a single point. It is built to work with
the map function. Its parameters and return are as follows:

    :param pts: a list of indices for points in the data matrix
    :return: the verticality of the point

This function finds the verticality of a point by finding the normal of the best-fit plane created by the 
surrounding points, then finding the angle between this normal and the positive z-axis. To achieve this, the
z component of the normal vector must be positive, so it is multiplied by -1 if it is negative. Changing the
sign of the z component will not change the value of the verticality, it only allows to vector to be compared
to the positive z-axis instead of the negative z-axis and ensures the resulting ratio is positive. The program
then uses the following formula:

	angle = arccos[(xa * xb + ya * yb + za * zb) / (√(xa^2 + ya^2 + za^2) * √(xb^2 + yb^2 + zb^2))]

where (xa, ya, za) = (normal[0], normal[1], normal[2]) (the normal vector's x, y, and z components) and
(xb, yb, zb) = (0, 0, 1) (the vector of the z-axis). The result is:

	angle = arccos(normal[2]/((√(normal[0])^2 + (normal[1])^2 + (normal[2])^2)*√(0 + 0 + 1^2)))

The resulting angle is in radians. The angle is then divided by pi/2 (the angle of the z-axis above the horizontal)
to get the ratio between the normal and the z-axis. The ratio is stored in the variable "vert" and returned.